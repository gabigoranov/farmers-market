@using Market.Data.Models
@model ReviewPageViewModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["PageTitle"];
}

@section Styles{
    <link rel="stylesheet" href="~/css/pages/reviews.css" asp-append-version="true" />
}

<section class="reviews-section">
    <div class="reviews-pie-container card">
        <canvas id="reviewsPieChart"></canvas>
    </div>
    <div class="reviews-histogram-container card">
        <canvas id="reviewsHistogramChart"></canvas>
    </div>
    <div class="reviews-list-container card">
        <div class="reviews-list-info-container">
            <h1>@(Localizer["LatestReviews"])</h1>
            <p>@(Localizer["ReviewsParagraph"])</p>
            <hr />
            <br />
        </div>

        <div class="reviews-list">
            @foreach (var review in Model.Reviews)
            {
                <partial name="_ReviewPartial" model="review" />
            }
        </div>
    </div>
</section>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Prepare data from Model.Reviews
            const reviews = @Html.Raw(Json.Serialize(Model.Reviews));

            // Calculate positive/negative split (using your existing logic)
            const positiveReviews = reviews.filter(x => x.rating <= 2.5).length;
            const negativeReviews = reviews.filter(x => x.rating > 2.5).length;

            // Calculate star distribution
            const starCounts = [0, 0, 0, 0, 0]; // For 1-5 stars
            reviews.forEach(review => {
                const starIndex = Math.floor(review.rating) - 1;
                if (starIndex >= 0 && starIndex < 5) {
                    starCounts[starIndex]++;
                }
            });

            // Pie Chart - Positive/Negative Split
            const pieCtx = document.getElementById('reviewsPieChart').getContext('2d');
            new Chart(pieCtx, {
                type: 'pie',
                data: {
                    labels: ['Negative (≤2.5★)', 'Positive (>2.5★)'],
                    datasets: [{
                        data: [positiveReviews, negativeReviews],
                        backgroundColor: [
                            'rgba(220, 53, 69, 0.8)',    // Red for negative
                            'rgba(40, 167, 69, 0.8)',  // Green for positive
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Review Sentiment Analysis',
                            font: {
                                size: 16
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const value = context.raw;
                                    const percentage = Math.round((value / total) * 100);
                                    return `${context.label}: ${value} (${percentage}%)`;
                                }
                            }
                        },
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            // Histogram Chart - Star Distribution
            const histCtx = document.getElementById('reviewsHistogramChart').getContext('2d');
            new Chart(histCtx, {
                type: 'bar',
                data: {
                    labels: ['1★', '2★', '3★', '4★', '5★'],
                    datasets: [{
                        label: 'Number of Reviews',
                        data: starCounts,
                        backgroundColor: 'rgba(13, 110, 253, 0.7)',
                        borderColor: 'rgba(13, 110, 253, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Number of Reviews'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Star Rating'
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Star Rating Distribution',
                            font: {
                                size: 16
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    const total = reviews.length;
                                    const value = context.raw;
                                    const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
                                    return `${value} reviews (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        });
    </script>
}
